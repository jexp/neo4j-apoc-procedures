"name","description","execution mode","location","deprecated by"
"apoc.refactor.extractNode(Object relationships,java.util.List<String> labels,String outType,String inType)","apoc.refactor.extractNode([rel1,rel2,...], [labels],'OUT','IN') extract node from relationships","WRITE","apoc.refactor.GraphRefactoring","N/A"
"apoc.refactor.collapseNode(Object nodes,String type)","apoc.refactor.collapseNode([node1,node2],'TYPE') collapse node to relationship, node with one rel becomes self-relationship","WRITE","apoc.refactor.GraphRefactoring","N/A"
"apoc.refactor.cloneNodes(java.util.List<org.neo4j.graphdb.Node> nodes)","apoc.refactor.cloneNodes([node1,node2,...]) clone nodes with their labels and properties","WRITE","apoc.refactor.GraphRefactoring","N/A"
"apoc.refactor.cloneNodesWithRelationships(java.util.List<org.neo4j.graphdb.Node> nodes)","apoc.refactor.cloneNodesWithRelationships([node1,node2,...]) clone nodes with their labels, properties and relationships","WRITE","apoc.refactor.GraphRefactoring","N/A"
"apoc.refactor.mergeNodes(java.util.List<org.neo4j.graphdb.Node> nodes)","apoc.refactor.mergeNodes([node1,node2]) merge nodes onto first in list","WRITE","apoc.refactor.GraphRefactoring","N/A"
"apoc.refactor.setType(org.neo4j.graphdb.Relationship relationship,String newType)","apoc.refactor.setType(rel, 'NEW-TYPE') change relationship-type","WRITE","apoc.refactor.GraphRefactoring","N/A"
"apoc.refactor.to(org.neo4j.graphdb.Relationship relationship,org.neo4j.graphdb.Node newNode)","apoc.refactor.to(rel, endNode) redirect relationship to use new end-node","WRITE","apoc.refactor.GraphRefactoring","N/A"
"apoc.refactor.from(org.neo4j.graphdb.Relationship relationship,org.neo4j.graphdb.Node newNode)","apoc.refactor.from(rel, startNode) redirect relationship to use new start-node","WRITE","apoc.refactor.GraphRefactoring","N/A"
"apoc.refactor.normalizeAsBoolean(Object entity,String propertyKey,java.util.List<Object> true_values,java.util.List<Object> false_values)","apoc.refactor.normalizeAsBoolean(entity, propertyKey, true_values, false_values) normalize/convert a property to be boolean","WRITE","apoc.refactor.GraphRefactoring","N/A"
"apoc.refactor.categorize(String sourceKey,String type,Boolean outgoing,String label,String targetKey,java.util.List<String> copiedKeys,long batchSize)","apoc.refactor.categorize(sourceKey, type, outgoing, label, targetKey, copiedKeys, batchSize) turn each unique propertyKey into a category node and connect to it","WRITE","apoc.refactor.GraphRefactoring","N/A"
