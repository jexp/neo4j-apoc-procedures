"name","description","execution mode","location","deprecated by"
"apoc.algo.betweenness(java.util.List<String> types,java.util.List<org.neo4j.graphdb.Node> nodes,String direction)","CALL apoc.algo.betweenness(['TYPE',...],nodes,BOTH) YIELD node, score - calculate betweenness centrality for given nodes","DEFAULT","apoc.algo.Centrality","N/A"
"apoc.algo.betweennessCypher(java.util.Map<String,Object> config)","CALL apoc.algo.betweennessCypher(node_cypher,rel_cypher,write) - calculates betweeness  centrality based on cypher input","WRITE","apoc.algo.Centrality","N/A"
"apoc.algo.closeness(java.util.List<String> types,java.util.List<org.neo4j.graphdb.Node> nodes,String direction)","CALL apoc.algo.closeness(['TYPE',...],nodes, INCOMING) YIELD node, score - calculate closeness centrality for given nodes","DEFAULT","apoc.algo.Centrality","N/A"
"apoc.algo.cliques(Number minSize)","apoc.algo.cliques(minSize) YIELD cliques - search the graph and return all maximal cliques at least at large as the minimum size argument.","DEFAULT","apoc.algo.Cliques","N/A"
"apoc.algo.cliquesWithNode(org.neo4j.graphdb.Node startNode,Number minSize)","apoc.algo.cliquesWithNode(startNode, minSize) YIELD cliques - search the graph and return all maximal cliques that are at least as large than the minimum size argument and contain this node ","DEFAULT","apoc.algo.Cliques","N/A"
"apoc.algo.cover(Object nodes)","apoc.algo.cover(nodes) yield rel - returns all relationships between this set of nodes","DEFAULT","apoc.algo.Cover","N/A"
"apoc.algo.community(long times,java.util.List<String> labels,String partitionKey,String type,String direction,String weightKey,long batchSize)","CALL apoc.algo.community(times,labels,partitionKey,type,direction,weightKey,batchSize) - simple label propagation kernel","WRITE","apoc.algo.LabelPropagation","N/A"
"apoc.algo.pageRank(java.util.List<org.neo4j.graphdb.Node> nodes)","CALL apoc.algo.pageRank(nodes) YIELD node, score - calculates page rank for given nodes","DEFAULT","apoc.algo.PageRank","N/A"
"apoc.algo.pageRankWithConfig(java.util.List<org.neo4j.graphdb.Node> nodes,java.util.Map<String,Object> config)","CALL apoc.algo.pageRankWithConfig(nodes,{iterations:_,types:_}) YIELD node, score, info - calculates page rank for given nodes","DEFAULT","apoc.algo.PageRank","N/A"
"apoc.algo.pageRankStats(java.util.Map<String,Object> config)","CALL apoc.algo.pageRankStats({iterations:_,types:_,write:true,...}) YIELD nodeCount - calculates page rank on graph  for given nodes and potentially writes back","WRITE","apoc.algo.PageRank","N/A"
"apoc.algo.pageRankWithCypher(java.util.Map<String,Object> config)","CALL apoc.algo.pageRankWithCypher({iterations,node_cypher,rel_cypher,write,property,numCpu}) - calculates page rank based on cypher input","WRITE","apoc.algo.PageRank","N/A"
"apoc.algo.aStar(org.neo4j.graphdb.Node startNode,org.neo4j.graphdb.Node endNode,String relationshipTypesAndDirections,String weightPropertyName,String latPropertyName,String lonPropertyName)","apoc.algo.aStar(startNode, endNode, 'KNOWS|<WORKS_WITH|IS_MANAGER_OF>', 'distance','lat','lon') YIELD path, weight - run A* with relationship property name as cost function","DEFAULT","apoc.algo.PathFinding","N/A"
"apoc.algo.aStarConfig(org.neo4j.graphdb.Node startNode,org.neo4j.graphdb.Node endNode,String relationshipTypesAndDirections,java.util.Map<String,Object> config)","apoc.algo.aStar(startNode, endNode, 'KNOWS|<WORKS_WITH|IS_MANAGER_OF>', {weight:'dist',default:10,x:'lon',y:'lat'}) YIELD path, weight - run A* with relationship property name as cost function","DEFAULT","apoc.algo.PathFinding","N/A"
"apoc.algo.dijkstra(org.neo4j.graphdb.Node startNode,org.neo4j.graphdb.Node endNode,String relationshipTypesAndDirections,String weightPropertyName)","apoc.algo.dijkstra(startNode, endNode, 'KNOWS|<WORKS_WITH|IS_MANAGER_OF>', 'distance') YIELD path, weight - run dijkstra with relationship property name as cost function","DEFAULT","apoc.algo.PathFinding","N/A"
"apoc.algo.allSimplePaths(org.neo4j.graphdb.Node startNode,org.neo4j.graphdb.Node endNode,String relationshipTypesAndDirections,long maxNodes)","apoc.algo.allSimplePaths(startNode, endNode, 'KNOWS|<WORKS_WITH|IS_MANAGER_OF>', 5) YIELD path, weight - run allSimplePaths with relationships given and maxNodes","DEFAULT","apoc.algo.PathFinding","N/A"
"apoc.algo.dijkstraWithDefaultWeight(org.neo4j.graphdb.Node startNode,org.neo4j.graphdb.Node endNode,String relationshipTypesAndDirections,String weightPropertyName,double defaultWeight)","apoc.algo.dijkstraWithDefaultWeight(startNode, endNode, 'KNOWS|<WORKS_WITH|IS_MANAGER_OF>', 'distance', 10) YIELD path, weight - run dijkstra with relationship property name as cost function and a default weight if the property does not exist","DEFAULT","apoc.algo.PathFinding","N/A"
"apoc.algo.wcc()","CALL apoc.algo.wcc() YIELD number of weakly connected components","DEFAULT","apoc.algo.WeaklyConnectedComponents","N/A"
