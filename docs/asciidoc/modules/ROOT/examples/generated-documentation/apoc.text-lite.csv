¦signature
¦apoc.text.doubleMetaphone(value :: ANY?) :: (value :: STRING?)
¦apoc.text.phonetic(value :: ANY?) :: (value :: STRING?)
¦apoc.text.phoneticDelta(text1 :: STRING?, text2 :: STRING?) :: (phonetic1 :: STRING?, phonetic2 :: STRING?, delta :: INTEGER?)
¦apoc.text.base64Decode(text :: STRING?) :: (STRING?)
¦apoc.text.base64Encode(text :: STRING?) :: (STRING?)
¦apoc.text.base64UrlDecode(url :: STRING?) :: (STRING?)
¦apoc.text.base64UrlEncode(url :: STRING?) :: (STRING?)
¦apoc.text.byteCount(text :: STRING?, charset = UTF-8 :: STRING?) :: (INTEGER?)
¦apoc.text.bytes(text :: STRING?, charset = UTF-8 :: STRING?) :: (LIST? OF ANY?)
¦apoc.text.camelCase(text :: STRING?) :: (STRING?)
¦apoc.text.capitalize(text :: STRING?) :: (STRING?)
¦apoc.text.capitalizeAll(text :: STRING?) :: (STRING?)
¦apoc.text.charAt(text :: STRING?, index :: INTEGER?) :: (INTEGER?)
¦apoc.text.clean(text :: STRING?) :: (STRING?)
¦apoc.text.code(codepoint :: INTEGER?) :: (STRING?)
¦apoc.text.compareCleaned(text1 :: STRING?, text2 :: STRING?) :: (BOOLEAN?)
¦apoc.text.decapitalize(text :: STRING?) :: (STRING?)
¦apoc.text.decapitalizeAll(text :: STRING?) :: (STRING?)
¦apoc.text.distance(text1 :: STRING?, text2 :: STRING?) :: (INTEGER?)
¦apoc.text.doubleMetaphone(value :: STRING?) :: (STRING?)
¦apoc.text.format(text :: STRING?, params :: LIST? OF ANY?, language = en :: STRING?) :: (STRING?)
¦apoc.text.fuzzyMatch(text1 :: STRING?, text2 :: STRING?) :: (BOOLEAN?)
¦apoc.text.hammingDistance(text1 :: STRING?, text2 :: STRING?) :: (INTEGER?)
¦apoc.text.hexCharAt(text :: STRING?, index :: INTEGER?) :: (STRING?)
¦apoc.text.hexValue(value :: INTEGER?) :: (STRING?)
¦apoc.text.indexOf(text :: STRING?, lookup :: STRING?, from = 0 :: INTEGER?, to = -1 :: INTEGER?) :: (INTEGER?)
¦apoc.text.indexesOf(text :: STRING?, lookup :: STRING?, from = 0 :: INTEGER?, to = -1 :: INTEGER?) :: (LIST? OF ANY?)
¦apoc.text.jaroWinklerDistance(text1 :: STRING?, text2 :: STRING?) :: (FLOAT?)
¦apoc.text.join(texts :: LIST? OF STRING?, delimiter :: STRING?) :: (STRING?)
¦apoc.text.levenshteinDistance(text1 :: STRING?, text2 :: STRING?) :: (INTEGER?)
¦apoc.text.levenshteinSimilarity(text1 :: STRING?, text2 :: STRING?) :: (FLOAT?)
¦apoc.text.lpad(text :: STRING?, count :: INTEGER?, delim =   :: STRING?) :: (STRING?)
¦apoc.text.phonetic(value :: STRING?) :: (STRING?)
¦apoc.text.random(length :: INTEGER?, valid = A-Za-z0-9 :: STRING?) :: (STRING?)
¦apoc.text.regexGroups(text :: STRING?, regex :: STRING?) :: (LIST? OF ANY?)
¦apoc.text.regreplace(text :: STRING?, regex :: STRING?, replacement :: STRING?) :: (STRING?)
¦apoc.text.repeat(item :: STRING?, count :: INTEGER?) :: (STRING?)
¦apoc.text.replace(text :: STRING?, regex :: STRING?, replacement :: STRING?) :: (STRING?)
¦apoc.text.rpad(text :: STRING?, count :: INTEGER?, delim =   :: STRING?) :: (STRING?)
¦apoc.text.slug(text :: STRING?, delim = - :: STRING?) :: (STRING?)
¦apoc.text.snakeCase(text :: STRING?) :: (STRING?)
¦apoc.text.sorensenDiceSimilarity(text1 :: STRING?, text2 :: STRING?, languageTag = en :: STRING?) :: (FLOAT?)
¦apoc.text.split(text :: STRING?, regex :: STRING?, limit = 0 :: INTEGER?) :: (LIST? OF ANY?)
¦apoc.text.swapCase(text :: STRING?) :: (STRING?)
¦apoc.text.toCypher(value :: ANY?, config = {} :: MAP?) :: (STRING?)
¦apoc.text.toUpperCase(text :: STRING?) :: (STRING?)
¦apoc.text.upperCamelCase(text :: STRING?) :: (STRING?)
¦apoc.text.urldecode(text :: STRING?) :: (STRING?)
¦apoc.text.urlencode(text :: STRING?) :: (STRING?)
