"name","description","execution mode","location","deprecated by"
"apoc.index.addAllNodes(String index,java.util.Map<String,java.util.List<String>> structure)","apoc.index.addAllNodes('name',{label1:['prop1',...],...}) YIELD type, name, config - create a free text search index","WRITE","apoc.index.FreeTextSearch","N/A"
"apoc.index.search(String index,String query)","apoc.index.search('name', 'query') YIELD node, weight - search for nodes in the free text index matching the given query","WRITE","apoc.index.FreeTextSearch","N/A"
"apoc.index.nodes(String label,String query)","apoc.index.nodes('Label','prop:value*') YIELD node - lucene query on node index with the given label name","WRITE","apoc.index.FulltextIndex","N/A"
"apoc.index.forNodes(String name,java.util.Map<String,String> config)","apoc.index.forNodes('name',{config}) YIELD type,name,config - gets or creates node index","WRITE","apoc.index.FulltextIndex","N/A"
"apoc.index.forRelationships(String name,java.util.Map<String,String> config)","apoc.index.forRelationships('name',{config}) YIELD type,name,config - gets or creates relationship index","WRITE","apoc.index.FulltextIndex","N/A"
"apoc.index.remove(String name)","apoc.index.remove('name') YIELD type,name,config - removes an manual index","WRITE","apoc.index.FulltextIndex","N/A"
"apoc.index.list()","apoc.index.list() - YIELD type,name,config - lists all manual indexes","WRITE","apoc.index.FulltextIndex","N/A"
"apoc.index.relationships(String type,String query)","apoc.index.relationships('TYPE','prop:value*') YIELD rel - lucene query on relationship index with the given type name","WRITE","apoc.index.FulltextIndex","N/A"
"apoc.index.between(org.neo4j.graphdb.Node from,String type,org.neo4j.graphdb.Node to,String query)","apoc.index.between(node1,'TYPE',node2,'prop:value*') YIELD rel - lucene query on relationship index with the given type name bound by either or both sides (each node parameter can be null)","WRITE","apoc.index.FulltextIndex","N/A"
"apoc.index.out(org.neo4j.graphdb.Node from,String type,String query)","apoc.index.out(node,'TYPE','prop:value*') YIELD node - lucene query on relationship index with the given type name for *outgoing* relationship of the given node, *returns end-nodes*","WRITE","apoc.index.FulltextIndex","N/A"
"apoc.index.in(org.neo4j.graphdb.Node to,String type,String query)","apoc.index.in(node,'TYPE','prop:value*') YIELD node lucene query on relationship index with the given type name for *incoming* relationship of the given node, *returns start-nodes*","WRITE","apoc.index.FulltextIndex","N/A"
"apoc.index.addNode(org.neo4j.graphdb.Node node,java.util.List<String> properties)","apoc.index.addNode(node,['prop1',...]) add node to an index for each label it has","WRITE","apoc.index.FulltextIndex","N/A"
"apoc.index.addNodeByLabel(String label,org.neo4j.graphdb.Node node,java.util.List<String> properties)","apoc.index.addNodeByLabel(node,'Label',['prop1',...]) add node to an index for the given label","WRITE","apoc.index.FulltextIndex","N/A"
"apoc.index.addRelationship(org.neo4j.graphdb.Relationship relationship,java.util.List<String> properties)","apoc.index.addRelationship(rel,['prop1',...]) add relationship to an index for its type","WRITE","apoc.index.FulltextIndex","N/A"
"apoc.index.related(java.util.List<org.neo4j.graphdb.Node> nodes,String label,String key,String relationship,long limit)","apoc.index.relatedNodes([nodes],label,key,'<TYPE'/'TYPE>'/'TYPE',limit) yield node - schema range scan which keeps index order and adds limit and checks opposite node of relationship against the given set of nodes","DEFAULT","apoc.index.SchemaIndex","N/A"
"apoc.index.orderedRange(String label,String key,Object min,Object max,boolean relevance,long limit)","apoc.index.orderedRange(label,key,min,max,sort-relevance,limit) yield node - schema range scan which keeps index order and adds limit, values can be null, boundaries are inclusive","DEFAULT","apoc.index.SchemaIndex","N/A"
"apoc.index.orderedByText(String label,String key,String operator,String value,boolean relevance,long limit)","apoc.index.orderedByText(label,key,operator,value,sort-relevance,limit) yield node - schema string search which keeps index order and adds limit, operator is 'STARTS WITH' or 'CONTAINS'","DEFAULT","apoc.index.SchemaIndex","N/A"
"apoc.schema.properties.distinct(String label,String key)","apoc.schema.properties.distinct(label, key) - quickly returns all distinct values for a given key","DEFAULT","apoc.index.SchemaIndex","N/A"
