"name","description","execution mode","location","deprecated by"
"apoc.coll.zipToRows(java.util.List<Object> list1,java.util.List<Object> list2)","apoc.coll.zipToRows(list1,list2) - creates pairs like zip but emits one row per pair","DEFAULT","apoc.coll.Coll","N/A"
"apoc.coll.partition(java.util.List<Object> values,long batchSize)","apoc.coll.partition(list,batchSize)","DEFAULT","apoc.coll.Coll","N/A"
"apoc.coll.split(java.util.List<Object> values,Object value)","apoc.coll.split(list,value) | splits collection on given values rows of lists, value itself will not be part of resulting lists","DEFAULT","apoc.coll.Coll","N/A"
"apoc.coll.zip(java.util.List<Object> list1,java.util.List<Object> list2)","apoc.coll.zip([list1],[list2])","N/A","apoc.coll.Coll","N/A"
"apoc.coll.pairs(java.util.List<Object> list)","apoc.coll.pairs([1,2,3]) returns [1,2],[2,3],[3,null] ","N/A","apoc.coll.Coll","N/A"
"apoc.coll.pairsMin(java.util.List<Object> list)","apoc.coll.pairsMin([1,2,3]) returns [1,2],[2,3]","N/A","apoc.coll.Coll","N/A"
"apoc.coll.sum(java.util.List<Number> numbers)","apoc.coll.sum([0.5,1,2.3])","N/A","apoc.coll.Coll","N/A"
"apoc.coll.avg(java.util.List<Number> numbers)","apoc.coll.avg([0.5,1,2.3])","N/A","apoc.coll.Coll","N/A"
"apoc.coll.min(java.util.List<Object> values)","apoc.coll.min([0.5,1,2.3])","N/A","apoc.coll.Coll","N/A"
"apoc.coll.max(java.util.List<Object> values)","apoc.coll.max([0.5,1,2.3])","N/A","apoc.coll.Coll","N/A"
"apoc.coll.contains(java.util.List<Object> coll,Object value)","apoc.coll.contains(coll, value) optimized contains operation (using a HashSet) (returns single row or not)","N/A","apoc.coll.Coll","N/A"
"apoc.coll.indexOf(java.util.List<Object> coll,Object value)","apoc.coll.indexOf(coll, value) | position of value in the list","N/A","apoc.coll.Coll","N/A"
"apoc.coll.containsAll(java.util.List<Object> coll,java.util.List<Object> values)","apoc.coll.containsAll(coll, values) optimized contains-all operation (using a HashSet) (returns single row or not)","N/A","apoc.coll.Coll","N/A"
"apoc.coll.containsSorted(java.util.List<Object> coll,Object value)","apoc.coll.containsSorted(coll, value) optimized contains on a sorted list operation (Collections.binarySearch) (returns single row or not)","N/A","apoc.coll.Coll","N/A"
"apoc.coll.containsAllSorted(java.util.List<Object> coll,java.util.List<Object> values)","apoc.coll.containsAllSorted(coll, value) optimized contains-all on a sorted list operation (Collections.binarySearch) (returns single row or not)","N/A","apoc.coll.Coll","N/A"
"apoc.coll.toSet(java.util.List<Object> values)","apoc.coll.toSet([list]) returns a unique list backed by a set","N/A","apoc.coll.Coll","N/A"
"apoc.coll.sumLongs(java.util.List<Number> numbers)","apoc.coll.sumLongs([1,3,3])","N/A","apoc.coll.Coll","N/A"
"apoc.coll.sort(java.util.List<Object> coll)","apoc.coll.sort(coll) sort on Collections","N/A","apoc.coll.Coll","N/A"
"apoc.coll.sortNodes(java.util.List<Object> coll,String prop)","apoc.coll.sortNodes([nodes], 'name') sort nodes by property","N/A","apoc.coll.Coll","N/A"
"apoc.coll.union(java.util.List<Object> first,java.util.List<Object> second)","apoc.coll.union(first, second) - creates the distinct union of the 2 lists","N/A","apoc.coll.Coll","N/A"
"apoc.coll.subtract(java.util.List<Object> first,java.util.List<Object> second)","apoc.coll.subtract(first, second) - returns unique set of first list with all elements of second list removed","N/A","apoc.coll.Coll","N/A"
"apoc.coll.removeAll(java.util.List<Object> first,java.util.List<Object> second)","apoc.coll.removeAll(first, second) - returns first list with all elements of second list removed","N/A","apoc.coll.Coll","N/A"
"apoc.coll.intersection(java.util.List<Object> first,java.util.List<Object> second)","apoc.coll.intersection(first, second) - returns the unique intersection of the two lists","N/A","apoc.coll.Coll","N/A"
"apoc.coll.disjunction(java.util.List<Object> first,java.util.List<Object> second)","apoc.coll.disjunction(first, second) - returns the disjunct set of the two lists","N/A","apoc.coll.Coll","N/A"
"apoc.coll.unionAll(java.util.List<Object> first,java.util.List<Object> second)","apoc.coll.unionAll(first, second) - creates the full union with duplicates of the two lists","N/A","apoc.coll.Coll","N/A"
